import java.io.FileReader;

import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;


public class TilesPlacement {

	
	public static void main(String args[]){
		JSONParser parser = new JSONParser();
		try{
			Object obj = parser.parse(new FileReader(System.getProperty("user.dir")+"/test_data/data.json"));
			JSONObject jsonObject = (JSONObject) obj;
			JSONArray polygon = (JSONArray)jsonObject.get("polygon");
			JSONArray rectangle = (JSONArray)jsonObject.get("rectangle");
			JSONArray firstPointArr = (JSONArray)polygon.get(0);
			JSONArray secondPointArr = (JSONArray)polygon.get(1);
			
			final double fpx = Double.parseDouble(firstPointArr.get(0).toString());
			final double fpy = Double.parseDouble(firstPointArr.get(1).toString());
			
			final double spx = Double.parseDouble(secondPointArr.get(0).toString());
			final double spy = Double.parseDouble(secondPointArr.get(1).toString());
			
			final double recLength = Double.parseDouble(rectangle.get(0).toString());
			final double recBreadth = Double.parseDouble(rectangle.get(1).toString());
			
			final Point firstPoint = new Point(fpx, fpy);
			final Point secondPoint = new Point(spx, spy);
			
			// Find the length of the first side
			final double firstLineLength = Utility.distance(firstPoint.getX(), firstPoint.getY(), secondPoint.getX(), secondPoint.getY());
			
			// Determine whether to use length or breadth of the rectangle
			/*
			 * if (s<l && s<b) forget it
			 * else smaller of the two
			 * */
			if(recBreadth< firstLineLength && recLength < firstLineLength){
				System.out.println("It is not possible to place even 1 tile on the first edge");
				System.exit(0);
			}
			final double breadth = Math.min(recBreadth, recLength);
			final double length = Math.max(recBreadth, recLength);
			
			//Create the equation of the firstLine
			LinearEquation firstLineEquation = LinearEquation.create(firstPoint, secondPoint);
			
			// get correct parallel line
			
			// get the intersection of the parrallel line and the adjacent line
			
			// find the first legitimate point on the parallel line
			
			
			
			System.out.println("ASDA");
		}catch(Exception e){
			System.out.println(e.getMessage());
		}
		
		
	}
}
