import static java.lang.Math.*;

import org.apache.commons.math3.linear.Array2DRowRealMatrix;
import org.apache.commons.math3.linear.ArrayRealVector;
import org.apache.commons.math3.linear.DecompositionSolver;
import org.apache.commons.math3.linear.LUDecomposition;
import org.apache.commons.math3.linear.RealMatrix;
import org.apache.commons.math3.linear.RealVector;


public class Utility {
	
	private static double xDirection = 0.0;
	private static double yDirection = 0.0;

	// func to find the intersection of two lines
	/*
	 * The equation should be in the form of ax + by = c
	 * */
	public static Point intersectionPoint(LinearEquation firstLine, LinearEquation secondLine){
		RealMatrix coefficients = new Array2DRowRealMatrix(new double[][] {{firstLine.getxConstant(),firstLine.getyConstant()},{secondLine.getxConstant(),secondLine.getyConstant()}}, false);
		DecompositionSolver solver = new LUDecomposition(coefficients).getSolver();
		
		RealVector constants = new ArrayRealVector(new double[]{-firstLine.getConstant(),-secondLine.getConstant()}, false);
		RealVector solution = solver.solve(constants);
		
		return new Point(solution.getEntry(0), solution.getEntry(1));
	}
	
	// func to find the line parallel to a given line at a particular distance
	public static LinearEquation correctParallelLine(final Point[] polygon, final double length){
		final LinearEquation firstLineEquation = LinearEquation.create(polygon[0], polygon[1]);
		
		LinearEquation[] parallelLines = findParallelLines(firstLineEquation, length);
		final Point perFoot1 = perpendicularFoot(polygon[0], parallelLines[0]);
		final Point perFoot2 = perpendicularFoot(polygon[0], parallelLines[1]);
		if(contains(polygon, perFoot1)){
			return parallelLines[0];
		}else{
			return parallelLines[1];
		}
	}
	
	// To get new point using parametric form
	public static Point nextPoint(final Point firstPoint,final double length, final double theta) {
	 final double x = firstPoint.getX() + xDirection*length*Math.cos(theta);
	 final double y = firstPoint.getY() + yDirection*length*Math.sin(theta);
	 return new Point(x,y);
	}
	
	// To set the direction
	public static void setDirection(final Point firstPoint,final Point secondPoint) {
		xDirection =  Math.signum(secondPoint.getX()-firstPoint.getX());
		yDirection =  Math.signum(secondPoint.getY()-firstPoint.getY());
	}
	
		
	// find the foot of perpendicular 
	public static Point perpendicularFoot(Point firstPoint, LinearEquation line){
		double p = firstPoint.getX();
		double q = firstPoint.getY();
		double a = line.getxConstant();
		double b = line.getyConstant();
		double c = line.getConstant();
		double h = p- a*(a*p+b*q+c)/(pow(a, 2) +pow(b, 2));
		double k = q - b*(a*p+b*q+c)/(pow(a, 2) +pow(b, 2));
		return new Point(h, k);
	}
	//find parallel lines at a distance to a given line
	public static LinearEquation[] findParallelLines(final LinearEquation line, final double length){
		LinearEquation[] parallelLines = new LinearEquation[2];
		final double slope = - line.getxConstant()/line.getyConstant();
		parallelLines[0] = new LinearEquation(-slope, 1, -line.getConstant()+length*sqrt(pow(slope, 2)+1));
		parallelLines[1] = new LinearEquation(-slope, 1, -line.getConstant()-length*sqrt(pow(slope, 2)+1));
		return parallelLines;
		
	}
	
	// find distance between two points
	public static double distance(final double x1,final double y1,final double x2,final double y2){
		return sqrt(pow((x2 - x1), 2) + pow((y2-y1), 2));
	}
	
	// func to check if a point lies within the polygon
	public static boolean contains(Point[] polygon, Point point) {
        int i, j;
        boolean result = false;

        for(i=0, j = polygon.length - 1; i<polygon.length; j = i++) {
            if((polygon[i].getY() > point.getY()) != (polygon[j].getY() > point.getY()) &&
                    (point.getX() < (polygon[j].getX() - polygon[i].getX())*(point.getY() - polygon[i].getY())/(polygon[j].getY()-polygon[i].getY()) + polygon[i].getX())) {
                result = !result;
            }
        }

        return result;
    }

	
	
}
