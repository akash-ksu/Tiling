import java.io.FileReader;
import java.util.ArrayList;
import java.util.List;

import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;

/**
 * This class determines the placements of titles along the first edge of any convex closed polygon 
 * where n>=3
 */
public class TilesPlacement {
	
	public static void main(String args[]){
		final JSONParser parser = new JSONParser();
		try{		
			Object obj = parser.parse(new FileReader(System.getProperty("user.dir")+"/test_data/data.json"));
			final JSONObject jsonObject = (JSONObject) obj;
			final JSONArray polygon = (JSONArray)jsonObject.get("polygon");
			final JSONArray rectangle = (JSONArray)jsonObject.get("rectangle");
			final JSONArray firstPointArr = (JSONArray)polygon.get(0);
			final JSONArray secondPointArr = (JSONArray)polygon.get(1);
			
			final Point[] polygonPoints = new Point[polygon.size()];
			for(int i=0;i<polygon.size(); i++){
				polygonPoints[i] = new Point(Double.parseDouble(((JSONArray)polygon.get(i)).get(0).toString()),Double.parseDouble(((JSONArray)polygon.get(i)).get(1).toString()));
			}
		
			final double recLength = Double.parseDouble(rectangle.get(0).toString());
			final double recBreadth = Double.parseDouble(rectangle.get(1).toString());
						
			// Find the length of the first side
			final double firstLineLength = Utility.distance(polygonPoints[0].getX(), polygonPoints[0].getY(), polygonPoints[1].getX(), polygonPoints[1].getY());			
			if(recBreadth> firstLineLength && recLength > firstLineLength){
				System.out.println("It is not possible to place even 1 tile on the first edge");
				System.exit(0);
			}
			// Determine length and breadth of the rectangle (breadth < length)
			final double breadth = Math.min(recBreadth, recLength);
			final double length = Math.max(recBreadth, recLength);
			
			// get correct parallel line
			final LinearEquation parallelLine = Utility.correctParallelLine(polygonPoints,length);
			if (parallelLine == null){
				System.out.println("It is not possible to place any tile");
				System.exit(0);
			}
			List<Rectangle> tileList = new ArrayList<Rectangle>();
			if (polygon.size() > 3){
				final Point firstPerpendicularPoint = Utility.perpendicularFoot(polygonPoints[0], parallelLine);				
				tileList = Utility.getRectangles(polygonPoints[0], firstPerpendicularPoint, parallelLine, breadth,length, polygonPoints);
			} else if(polygon.size() == 3){
				final LinearEquation sideThroughFirstPoint = new LinearEquation(polygonPoints[0],polygonPoints[polygonPoints.length -1]);
				final LinearEquation firstLine = new LinearEquation(polygonPoints[0],polygonPoints[1]);
				final Point intersectOfParallelAndSide = Utility.intersectionPoint(sideThroughFirstPoint, parallelLine);
				final Point firstPerpendicularPoint = Utility.perpendicularFoot(intersectOfParallelAndSide, firstLine);
				tileList = Utility.getRectangles(firstPerpendicularPoint, intersectOfParallelAndSide, parallelLine, breadth,length,polygonPoints);				
			}
			
			System.out.println("Total No. of Rectangles found: " + tileList.size());
			for(Rectangle tile : tileList){
				System.out.println("Coordinates of Tile:");
				System.out.println("{" + tile.getTopLeft().getX() + "," +tile.getTopLeft().getY() +"}");
				System.out.println("{" + tile.getTopRight().getX() + "," +tile.getTopRight().getY() +"}");
				System.out.println("{" + tile.getBottomLeft().getX() + "," +tile.getBottomLeft().getY() +"}");
				System.out.println("{" + tile.getBottomRight().getX() + "," +tile.getBottomRight().getY() +"}");
				System.out.println("****************************************");
			}
			
		}catch(Exception e){
			System.out.println(e.getMessage());
		}				
	}
}
